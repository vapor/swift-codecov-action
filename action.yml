name: Swift Codecov Upload Action
description: A GitHub Action which performs Codecov.io uploads with additional support for Swift projects.
branding:
  icon: feather
  color: orange

inputs:
  package_path:
    description: The location of the repository. Defaults to $GITHUB_WORKSPACE. This will be used as the working_directory for the Codecov upload action.
    required: false
    # N.B.: Can not simply default to github.workspace here, as it will not be correctly updated when the action is called from
    # within a job which runs in a container.
    default: ''
  build_parameters:
    description: Additional parameters needed by swift build and swift test to disambiguate the correct target and configuration, i.e. -c release. Only flags which affect the output binary path are required.
    required: false
    default: ''
  codecov_token:
    description: The Codecov token for the repository.
    required: false
    default: ''
  # The following are passthrough parameters for the Codecov upload action.
  fail_ci_if_error: { description: 'See https://github.com/codecov/codecov-action#arguments', required: false, default: '' }
  verbose:          { description: 'See https://github.com/codecov/codecov-action#arguments', required: false, default: '' }
  dry_run:          { description: 'See https://github.com/codecov/codecov-action#arguments', required: false, default: '' }
  flags:            { description: 'See https://github.com/codecov/codecov-action#arguments', required: false, default: '' }
  env_vars:         { description: 'See https://github.com/codecov/codecov-action#arguments', required: false, default: '' }

runs:
  using: composite
  steps:
    
    - id: determine-package-info
      shell: bash
      env:
        PACKAGE_PATH: ${{ inputs.package_path != '' && format('--package-path={0}', inputs.package_path) || '' }}
        BUILD_PARAMETERS: ${{ inputs.build_parameters }}
      run: |
        binpath="$(swift build ${PACKAGE_PATH} ${BUILD_PARAMETERS} --show-bin-path)"
        pkgname="$(swift package ${PACKAGE_PATH} describe --type json | fgrep -v 'Found unhandled resource at' | perl -e 'use JSON::PP; print (decode_json(join("",(<>)))->{name});')"
        excname="${pkgname}PackageTests.xctest"; [[ -d "${binpath}/${excname}" ]] && excname+="/Contents/macOS/${excname%*.xctest}"

        # https://github.com/apple/swift-package-manager/issues/5853 - broken by 5.8, fixed in 5.9
        if [[ "$(swift package --version)" =~ 5\.8\.[0-9]+$ ]]; then
            covpath="${binpath}/codecov"
        else
            covpath="$(dirname "$(swift test ${PACKAGE_PATH} ${BUILD_PARAMETERS} --show-codecov-path)")"
        fi

        echo "COVERAGE_OBJECT=${binpath}/${excname}" >>"${GITHUB_ENV}"
        echo "COVERAGE_DATA=${covpath}/default.profdata" >>"${GITHUB_ENV}"

    - id: convert-coverage-report
      env:
        PACKAGE_PATH:  ${{ inputs.package_path     != '' && format('{0}/',                    inputs.package_path)     || '' }}
        TOKEN:         ${{ inputs.codecov_token }}
        ROOTDIR:       ${{ inputs.package_path     != '' && format(',"root_dir":"{0}"',       inputs.package_path)     || '' }}
        RAISEERR:      ${{ inputs.fail_ci_if_error != '' && format(',"fail_ci_if_error":{0}', inputs.fail_ci_if_error) || '' }}
        VERBOSE:       ${{ inputs.verbose          != '' && format(',"verbose":{0}',          inputs.verbose)          || '' }}
        DRY_RUN:       ${{ inputs.dry_run          != '' && format(',"dry_run":{0}',          inputs.dry_run)          || '' }}
        FLAGS:         ${{ inputs.flags            != '' && format(',"flags":"{0}"',          inputs.flags)            || '' }}
        ENVVARS:       ${{ inputs.env_vars         != '' && format(',"env_vars":"{0}"',       inputs.env_vars)         || '' }}
      shell: bash
      run: |
        $(which xcrun || true) llvm-cov show \
            --format=text \
            --ignore-filename-regex='/\.build/.*' \
            --instr-profile="${COVERAGE_DATA}" \
            "${COVERAGE_OBJECT}" \
            >"${PACKAGE_PATH}codecov.txt"

        printf 'params={"token":"%s","files":"codecov.txt","disable_search":true,"working-directory":"%s"%s%s%s%s%s%s}' \
          "${TOKEN}" \
          "${PACKAGE_PATH}" \
          "${ROOTDIR}" "${FLAGS}" "${ENVVARS}" "${RAISEERR}" "${VERBOSE}" "${DRY_RUN}" \
          >>"${GITHUB_OUTPUT}"

    - id: upload-coverage-report
      uses: codecov/codecov-action@v5
      with: ${{ fromJSON(steps.convert-coverage-report.outputs.params) }}
