name: Swift Codecov Upload Action
description: A GitHub Action which performs Codecov.io uploads with additional support for Swift projects.
branding:
  icon: feather
  color: orange

inputs:
  ignore_paths:
    description: A regular expression which specifies paths in the repository which will not be included in the coverage data. The /.build folder is always ignored.
    required: false
    default: '/Tests/'
  package_path:
    description: The location of the repository. Defaults to $GITHUB_WORKSPACE. This will be used as the working_directory for the Codecov upload action.
    required: false
    # N.B.: Can not simply default to github.workspace here, as it will not be correctly updated when the action is called from
    # within a job which runs in a container.
    default: ''
  build_parameters:
    description: Additional parameters needed by swift build and swift test to disambiguate the correct target and configuration, i.e. -c release. Only flags which affect the output binary path are required.
    required: false
    default: ''
  # The following are passthrough parameters for the Codecov upload action.
  cc_token:            { description: 'See https://github.com/codecov/codecov-action#arguments', required: false, default: '' }
  cc_flags:            { description: 'See https://github.com/codecov/codecov-action#arguments', required: false, default: '' }
  cc_env_vars:         { description: 'See https://github.com/codecov/codecov-action#arguments', required: false, default: '' }
  cc_fail_ci_if_error: { description: 'See https://github.com/codecov/codecov-action#arguments', required: false, default: '' }
  cc_verbose:          { description: 'See https://github.com/codecov/codecov-action#arguments', required: false, default: '' }
  cc_dry_run:          { description: 'See https://github.com/codecov/codecov-action#arguments', required: false, default: '' }

runs:
  using: composite
  steps:
  
    - id: determine-package-info
      shell: bash
      run: |
        if [[ -n '${{ inputs.package_path }}' ]]; then pkgpath='${{ inputs.package_path }}'; else pkgpath="${GITHUB_WORKSPACE}"; fi
        pkgpath="$(cd "${pkgpath}" && pwd)"
        
        pkgname="$(swift package --package-path "${pkgpath}" dump-package | \
                   perl -e 'use JSON::PP; print (decode_json(join("",(<>)))->{name});')"
        binpath="$(swift build --package-path "${pkgpath}" ${{ inputs.build_parameters }} --show-bin-path)"
        covpath="$(dirname "$(swift test --package-path "${pkgpath}" ${{ inputs.build_parameters }} --show-codecov-path)")"
        
        binname="${pkgname}PackageTests.xctest"
        if [[ '${{ runner.os }}' == 'macOS' ]]; then binname+="/Contents/MacOS/${pkgname}PackageTests"; fi
        
        echo "COVERAGE_ROOT=${pkgpath}" >>"${GITHUB_ENV}"
        echo "COVERAGE_DATA=${covpath}/default.profdata" >>"${GITHUB_ENV}"
        echo "COVERAGE_OBJECT=${binpath}/${binname}" >>"${GITHUB_ENV}"
        echo "COVERAGE_OUTPUT=${covpath}/${pkgname}.lcov" >>"${GITHUB_ENV}"

    - id: convert-coverage-report
      shell: bash
      run: |
        $(which xcrun || true) llvm-cov export \
            -format lcov \
            --ignore-filename-regex='/\.build/|(${{ inputs.ignore_paths }})' \
            -instr-profile="${COVERAGE_DATA}" \
            "${COVERAGE_OBJECT}" \
            >"${COVERAGE_OUTPUT}"

    - id: gather-codecov-params
      shell: bash
      run: |
        cc_params=''
        [[ -n '${{ inputs.cc_token }}' ]]            && cc_params+='"token": "${{ inputs.cc_token }}", '
        [[ -n '${{ inputs.cc_flags }}' ]]            && cc_params+='"flags": "${{ inputs.cc_flags }}", '
        [[ -n '${{ inputs.cc_env_vars }}' ]]         && cc_params+='"env_vars": "${{ inputs.cc_env_vars }}", '
        [[ -n '${{ inputs.cc_fail_ci_if_error }}' ]] && cc_params+='"fail_ci_if_error": ${{ inputs.cc_fail_ci_if_error }}, '
        [[ -n '${{ inputs.cc_verbose }}' ]]          && cc_params+='"verbose": ${{ inputs.cc_verbose }}, '
        [[ -n '${{ inputs.cc_dry_run }}' ]]          && cc_params+='"dry_run": ${{ inputs.cc_dry_run }}, '
                                                        cc_params+='"files": "'"${COVERAGE_OUTPUT}"'", '
                                                        cc_params+='"root_dir": "'"${COVERAGE_ROOT}"'"'
        echo "CODECOV_ACTION_PARAMS={${cc_params}}" >>"${GITHUB_ENV}"

    - id: upload-coverage-report
      uses: codecov/codecov-action@v3
      with: ${{ fromJSON(env.CODECOV_ACTION_PARAMS) }}
